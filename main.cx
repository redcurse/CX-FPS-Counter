package main
import "glfw"

// *************************************
// START - FPS Displayer
// *************************************
type FpsDisplayer struct {
    previousTime f64
    timer f64
    ticker f64
    fpsCounter i32
    currentFps i32
    showFps bool
}

func createFpsDisplayer(ticker f64)(fpsDisplayer FpsDisplayer) {
    var displayer FpsDisplayer
    displayer.timer = 1.0D
    displayer.ticker = ticker
    displayer.fpsCounter = 0
    displayer.currentFps = 0
    displayer.showFps = true

    fpsDisplayer = displayer
}

func updateFpsDisplayer(displayer FpsDisplayer, currentTime f64)(fpsDisplayer FpsDisplayer) {
    displayer.previousTime = currentTime
    displayer.fpsCounter = displayer.fpsCounter + 1

    if currentTime - displayer.timer > displayer.ticker {
        displayer.timer = displayer.timer + displayer.ticker
        displayer.currentFps = f64.i32(i32.f64(displayer.fpsCounter) / displayer.ticker)
        if displayer.showFps {
            i32.print(displayer.currentFps)
        }
        displayer.fpsCounter = 0
    }

    fpsDisplayer = displayer
}
// *************************************
// END - FPS Displayer
// *************************************

// *************************************
// START - FPS Limiter
// *************************************

type FpsLimiter struct {
    previousTime f64
    delta f64
    limit i32
    limitReached bool
}

func createFpsLimiter(limit i32)(fpsLimiter FpsLimiter) {
    var limiter FpsLimiter
    limiter.limit = limit
    fpsLimiter = limiter
}

func updateFpsLimiter(limiter FpsLimiter, currentTime f64)(fpsLimiter FpsLimiter) {
    var ns f64 = 1.0D / i32.f64(limiter.limit)
    limiter.delta = limiter.delta + (currentTime - limiter.previousTime) / ns
    limiter.previousTime = currentTime

    if limiter.delta >= 1.0D {
        limiter.limitReached = true
        limiter.delta = limiter.delta - 1.0D
    } else {
        limiter.limitReached = false
    }

    fpsLimiter = limiter
}

// *************************************
// END - FPS Limiter
// *************************************

type Window struct {
    Height i32
    Width i32
}

func initGlfw (window Window) {
    glfw.Init()
    glfw.WindowHint(glfw.Resizable, glfw.False)
    glfw.CreateWindow("window", window.Width, window.Height, "Game Test - CX")
    glfw.MakeContextCurrent("window")
}

func startGame() {
    var fpsTicker f64 = 1.0D
    var fpsDisplayer FpsDisplayer = createFpsDisplayer(fpsTicker)
    var fpsLimit i32 = 60
    var fpsLimiter FpsLimiter = createFpsLimiter(fpsLimit)

    for bool.not(glfw.ShouldClose("window")) {
        var currentTime f64 = glfw.GetTime()
        fpsLimiter = updateFpsLimiter(fpsLimiter, currentTime)
        
        if fpsLimiter.limitReached {
            fpsDisplayer = updateFpsDisplayer(fpsDisplayer, currentTime)
        }
        
        glfw.PollEvents()
        glfw.SwapBuffers("window")
    }
}

func main() {
    var window Window
    window = Window {Height: 748,Width: 1024}

    initGlfw(window)

    startGame()
}