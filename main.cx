package main
import "glfw"
import "LoopTracker"
import "LoopLimiter"


type Window struct {
    Height i32
    Width i32
}

func initGlfw (window Window) {
    glfw.Init()
    glfw.WindowHint(glfw.Resizable, glfw.False)
    glfw.CreateWindow("window", window.Width, window.Height, "Game Test - CX")
    glfw.MakeContextCurrent("window")
}

func startGame() {
    // Create trackers for your loop.
    // Set a ticker for how often the tracker is updated. 1.0D = once per second
    // Give the tracker a name so you can see which loop is being displayed in the terminal
    var mainLoopTicker f64 = 1.0D
    var mainLoopTracker LoopTracker.LoopTracker = LoopTracker.createLoopTracker(mainLoopTicker, "Main loop")
    var fpsTicker f64 = 1.0D
    var fpsTracker LoopTracker.LoopTracker = LoopTracker.createLoopTracker(fpsTicker, "Render loop")

    // Create a limiter to only allow blocks of code to run 'x' number of times per second
    // Easily enable or disable the limiter
    var fpsLimit i32 = 30
    var fpsLimiter LoopLimiter.LoopLimiter = LoopLimiter.createLoopLimiter(fpsLimit, true)

    for bool.not(glfw.ShouldClose("window")) {
        var currentTime f64 = glfw.GetTime()

        // Run the update function in your loop to keep track of how many times your loop runs per second
        mainLoopTracker = LoopTracker.updateLoopTracker(mainLoopTracker, currentTime)

        // Update the limiter so it knows when the limit has been reached
        fpsLimiter = LoopLimiter.updateLoopLimiter(fpsLimiter, currentTime)
        
        // Pass the delta time into your main game update to keep the speed of your game consistant across devices
        // Look up delta time for game development if unfamiliar
        mainGameUpdate(mainLoopTracker.deltaTime)
        
        // Check if the limit has been reached
        if fpsLimiter.limitReached {

            // You can update multiple trackers or limiters for your needs
            fpsTracker = LoopTracker.updateLoopTracker(fpsTracker, currentTime)   
            glfw.PollEvents()
            glfw.SwapBuffers("window")
        }
    }
}

func mainGameUpdate(deltaTime f64) {}

func main() {
    var window Window
    window = Window {Height: 748,Width: 1024}

    initGlfw(window)

    startGame()
}