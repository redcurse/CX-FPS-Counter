package main
import "glfw"

// *************************************
// START - Loop Tracker
// *************************************
type LoopTracker struct {
    loopName str
    deltaTime f64
    previousTime f64
    timer f64
    ticker f64
    fpsCounter i32
    currentLoopsPerSecond i32
    showLoopsPerSecond bool
}

func createLoopTracker(ticker f64, loopName str)(loopTracker LoopTracker) {
    var tracker LoopTracker
    tracker.loopName = loopName
    tracker.timer = 1.0D
    tracker.ticker = ticker
    tracker.fpsCounter = 0
    tracker.currentLoopsPerSecond = 0
    tracker.showLoopsPerSecond = true

    loopTracker = tracker
}

func updateLoopTracker(tracker LoopTracker, currentTime f64)(loopTracker LoopTracker) {
    tracker.deltaTime = currentTime - tracker.previousTime
    tracker.previousTime = currentTime
    tracker.fpsCounter = tracker.fpsCounter + 1

    if currentTime - tracker.timer > tracker.ticker {
        tracker.timer = tracker.timer + tracker.ticker
        tracker.currentLoopsPerSecond = f64.i32(i32.f64(tracker.fpsCounter) / tracker.ticker)
        if tracker.showLoopsPerSecond {
            printf("%s loops per second: %d \n", tracker.loopName, tracker.currentLoopsPerSecond)
        }
        tracker.fpsCounter = 0
    }

    loopTracker = tracker
}
// *************************************
// END - Loop Tracker
// *************************************


// *************************************
// START - Loop Limiter
// *************************************
type LoopLimiter struct {
    previousTime f64
    delta f64
    limit i32
    limitReached bool
    enabled bool
}

func createLoopLimiter(limit i32, enabled bool)(loopLimiter LoopLimiter) {
    var limiter LoopLimiter
    limiter.limit = limit
    limiter.enabled = enabled
    loopLimiter = limiter
}

func updateLoopLimiter(limiter LoopLimiter, currentTime f64)(loopLimiter LoopLimiter) {
    if limiter.enabled {
        var fractionOfSecond f64 = 1.0D / i32.f64(limiter.limit)
        limiter.delta = limiter.delta + (currentTime - limiter.previousTime) / fractionOfSecond
        limiter.previousTime = currentTime

        if limiter.delta >= 1.0D {
            limiter.limitReached = true
            limiter.delta = limiter.delta - 1.0D
        } else {
            limiter.limitReached = false
        }
    } else {
        limiter.limitReached = true
    }

    loopLimiter = limiter
}
// *************************************
// END - Loop Limiter
// *************************************


// *************************************
// Start - Example of Use
// *************************************
type Window struct {
    Height i32
    Width i32
}

func initGlfw (window Window) {
    glfw.Init()
    glfw.WindowHint(glfw.Resizable, glfw.False)
    glfw.CreateWindow("window", window.Width, window.Height, "Game Test - CX")
    glfw.MakeContextCurrent("window")
}

func startGame() {
    var mainLoopTicker f64 = 1.0D
    var mainLoopTracker LoopTracker = createLoopTracker(mainLoopTicker, "Main loop")
    var fpsTicker f64 = 1.0D
    var fpsTracker LoopTracker = createLoopTracker(fpsTicker, "Render loop")
    var fpsLimit i32 = 30
    var fpsLimiter LoopLimiter = createLoopLimiter(fpsLimit, true)

    for bool.not(glfw.ShouldClose("window")) {
        var currentTime f64 = glfw.GetTime()

        mainLoopTracker = updateLoopTracker(mainLoopTracker, currentTime)
        fpsLimiter = updateLoopLimiter(fpsLimiter, currentTime)
        
        mainGameUpdate(mainLoopTracker.deltaTime)
        
        if fpsLimiter.limitReached {
            fpsTracker = updateLoopTracker(fpsTracker, currentTime)   
            glfw.PollEvents()
            glfw.SwapBuffers("window")
        }
    }
}

func mainGameUpdate(deltaTime f64) {}

func main() {
    var window Window
    window = Window {Height: 748,Width: 1024}

    initGlfw(window)

    startGame()
}
// *************************************
// End - Example of Use
// *************************************